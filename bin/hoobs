#!/usr/bin/env node

process.title = "hoobs-core";

const OS = require("os");
const File = require("../node_modules/fs-extra/lib");
const Remove = require("../node_modules/rimraf");
const Ora = require("../node_modules/ora");

const { dirname, join } = require("path");
const { exec, spawn } = require("child_process");

let password = null;

process.argv.forEach((value, index) => {
    if (value === "-p") {
        password = "#sudo-password#"
    } else if (password === "#sudo-password#") {
        password = value;

        return;
    }
});

const home = OS.userInfo().homedir;
const root = join(home, ".hoobs");
const applicaiton = join(dirname(File.realpathSync(__filename)), "../");
const installed = JSON.parse(File.readFileSync(join(applicaiton, "package.json")));

let executing = null;
let throbber = null;

if (File.existsSync(join(root, "package.json"))) {
    executing = JSON.parse(File.readFileSync(join(join(root, "package.json"))));
}

if (!executing || installed.version !== executing.version) {
    throbber = Ora("Initilizing").start();

    if (executing && executing.dependencies) {
        const dependencies = Object.keys(executing.dependencies);

        for (let i = 0; i < dependencies.length; i++) {
            const name = dependencies[i];
            const dependency = executing.dependencies[dependencies[i]];

            if ((name.startsWith("homebridge-") || (name.startsWith("@hoobs/") && name !== "@hoobs/homebridge")) && !installed.dependencies.hasOwnProperty(name)) {
                installed.dependencies[name] = dependency;
            }
        }

        if (File.existsSync(join(root, "package.json"))) {
            File.unlinkSync(join(root, "package.json"));
        }

        File.appendFileSync(join(root, "package.json"), JSON.stringify(installed, null, 4));
    } else {
        if (File.existsSync(join(root, "package.json"))) {
            File.unlinkSync(join(root, "package.json"));
        }

        File.copySync(join(applicaiton, "package.json"), join(root, "package.json"));
    }

    throbber.stopAndPersist();
    throbber = Ora("Setting Up User Mode").start();

    if (File.existsSync(join(root, "dist"))) {
        Remove.sync(join(root, "dist"));
    }

    if (File.existsSync(join(root, "lib"))) {
        Remove.sync(join(root, "lib"));
    }

    if (File.existsSync(join(root, "src"))) {
        Remove.sync(join(root, "src"));
    }

    if (File.existsSync(join(root, "public"))) {
        Remove.sync(join(root, "public"));
    }

    if (File.existsSync(join(root, "node_modules"))) {
        Remove.sync(join(root, "node_modules"));
    }

    File.copySync(join(applicaiton, "lib"), join(root, "lib"));
    File.copySync(join(applicaiton, "src"), join(root, "src"));
    File.copySync(join(applicaiton, "public"), join(root, "public"));

    if (File.existsSync(join(root, "default.json"))) {
        File.unlinkSync(join(root, "default.json"));
    }

    if (File.existsSync(join(root, "vue.config.json"))) {
        File.unlinkSync(join(root, "vue.config.json"));
    }

    if (File.existsSync(join(root, "babel.config.json"))) {
        File.unlinkSync(join(root, "babel.config.json"));
    }

    if (File.existsSync(join(root, "postcss.config.json"))) {
        File.unlinkSync(join(root, "postcss.config.json"));
    }

    File.copySync(join(applicaiton, "default.json"), join(root, "default.json"));
    File.copySync(join(applicaiton, "vue.config.js"), join(root, "vue.config.js"));
    File.copySync(join(applicaiton, "babel.config.js"), join(root, "babel.config.js"));
    File.copySync(join(applicaiton, "postcss.config.js"), join(root, "postcss.config.js"));

    let prompts = 0;

    throbber.stopAndPersist({
        text: "User Mode Active"
    });

    throbber = Ora("Fixing Node Cache").start();

    const process = spawn("sudo", [
        "-S",
        "-k",
        "-p",
        "#sudo-hoobs#",
        "rm",
        "-fR",
        join(home, ".npm")
    ]);

    process.stdout.on("data", (data) => {
        console.log(`${data}`.trimEnd());
    });

    process.stderr.on("data", (data) => {
        const lines = `${data}`.split(/\r?\n/);

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trim();

            if (line === "#sudo-hoobs#") {
                if (++prompts > 1) {
                    process.stdin.write("\n\n\n\n");
                } else {
                    process.stdin.write(`${password || ""}\n`);
                }
            }
        }
    });

    process.on("close", () => {
        throbber.stopAndPersist({
            text: "Node Cache Fixed"
        });
    
        throbber = Ora("Configuring Server").start();

        exec("npm install --unsafe-perm", {
            cwd: root
        }, () => {
            throbber.stop();
    
            require(join(root, "lib/cli"))();
        });
    });
} else {
    require(join(root, "lib/cli"))();
}
