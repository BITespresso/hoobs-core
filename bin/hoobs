#!/usr/bin/env node

process.title = "hoobs-core";

const OS = require("os");
const Path = require("path");
const Process = require("child_process");

const File = require("../node_modules/fs-extra/lib");
const Ora = require("../node_modules/ora");
const Remove = require("../node_modules/rimraf");

let password = null;

process.argv.forEach((value) => {
    if (value === "-p") {
        password = "#sudo-password#"
    } else if (password === "#sudo-password#") {
        password = value;

        return;
    }
});

const home = OS.userInfo().homedir;
const root = Path.join(home, ".hoobs");
const applicaiton = Path.join(Path.dirname(File.realpathSync(__filename)), "../");
const installed = JSON.parse(File.readFileSync(Path.join(applicaiton, "package.json")));

let executing = null;
let throbber = null;

if (!File.existsSync(root)){
    File.mkdirSync(root);
}

if (File.existsSync(Path.join(root, "package.json"))) {
    try {
        executing = JSON.parse(File.readFileSync(Path.join(root, "package.json")));
    } catch {
        executing = null;
    }
}

const preparePackage = function() {
    const plugins = [];
    const linked = Object.keys(installed.dependencies);

    throbber = Ora("Initilizing").start();

    if (executing && executing.dependencies) {
        const dependencies = Object.keys(executing.dependencies);

        for (let i = 0; i < dependencies.length; i++) {
            const name = dependencies[i];
            const dependency = executing.dependencies[dependencies[i]];

            if ((name.startsWith("homebridge-") || (name.startsWith("@hoobs/") && name !== "@hoobs/homebridge" && name !== "@hoobs/systeminfo")) && !installed.dependencies.hasOwnProperty(name)) {
                installed.dependencies[name] = dependency;

                plugins.push(name);
            }
        }
    }

    if (installed.devDependencies) {
        delete installed.devDependencies;
    }

    if (installed.scripts) {
        delete installed.scripts;
    }

    if (installed.bin) {
        delete installed.bin;
    }

    if (File.existsSync(Path.join(root, "package.json"))) {
        File.unlinkSync(Path.join(root, "package.json"));
    }

    File.appendFileSync(Path.join(root, "package.json"), JSON.stringify(installed, null, 4));

    throbber.stop();

    return {
        dependencies: linked,
        plugins
    };
}

const setupUserMode = function(dependencies) {
    return new Promise((resolve) => {
        throbber = Ora("Setting Up User Mode").start();

        if (File.existsSync(Path.join(root, "dist"))) {
            Remove.sync(Path.join(root, "dist"));
        }

        if (File.existsSync(Path.join(root, "lib"))) {
            Remove.sync(Path.join(root, "lib"));
        }

        if (File.existsSync(Path.join(root, "node_modules"))) {
            Remove.sync(Path.join(root, "node_modules"));
        }

        File.copySync(Path.join(applicaiton, "dist"), Path.join(root, "dist"));
        File.copySync(Path.join(applicaiton, "lib"), Path.join(root, "lib"));

        if (File.existsSync(Path.join(root, "package-lock.json"))) {
            File.unlinkSync(Path.join(root, "package-lock.json"));
        }

        if (File.existsSync(Path.join(root, "default.json"))) {
            File.unlinkSync(Path.join(root, "default.json"));
        }

        File.copySync(Path.join(applicaiton, "default.json"), Path.join(root, "default.json"));

        Process.exec(`npm set progress=false && npm install --unsafe-perm ${dependencies.join(" ")}`, {
            cwd: root
        }, () => {
            throbber.stop();

            resolve();
        });
    });
}

const fixNodeCache = function() {
    return new Promise((resolve) => {
        throbber = Ora("Fixing Node Cache").start();

        let prompts = 0;

        const process = Process.spawn("sudo", [
            "-S",
            "-k",
            "-p",
            "#sudo-hoobs#",
            "rm",
            "-fR",
            Path.join(home, ".npm")
        ]);

        process.stderr.on("data", (data) => {
            const lines = `${data}`.split(/\r?\n/);

            for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();

                if (line === "#sudo-hoobs#") {
                    if (++prompts > 1) {
                        process.stdin.write("\n\n\n\n");
                    } else {
                        process.stdin.write(`${password || ""}\n`);
                    }
                }
            }
        });

        process.on("close", () => {
            throbber.stop();
        
            resolve();
        });
    });
}

const installPackages = function(plugins) {
    return new Promise((resolve) => {
        throbber = Ora("Initilizing Plugins").start();

        if (plugins.length > 0) {
            Process.exec(`npm set progress=false && npm install --unsafe-perm ${plugins.join(" ")}`, {
                cwd: root
            }, () => {
                throbber.stop();
        
                resolve();
            });
        } else {
            throbber.stop();

            resolve();
        }
    });
}

if (!executing || installed.version !== executing.version) {
    const data = preparePackage();

    setupUserMode(data.dependencies).then(() => {
        fixNodeCache().then(() => {
            installPackages(data.plugins).then(() => {
                require(Path.join(root, "lib/cli"))();
            });
        });
    });
} else {
    require(Path.join(root, "lib/cli"))();
}
