#!/usr/bin/env node

process.title = "hoobs-core";

const OS = require("os");
const Ora = require("../node_modules/ora");
const File = require("../node_modules/fs-extra/lib");
const Copy = require("../node_modules/recursive-copy");
const Remove = require("../node_modules/rimraf");

const { dirname, join, basename } = require("path");

let password = null;

process.argv.forEach((value, index) => {
    if (value === "-p") {
        password = "#sudo-password#"
    } else if (password === "#sudo-password#") {
        password = value;

        return;
    }
});

const home = OS.userInfo().homedir;
const root = join(home, ".hoobs");
const applicaiton = join(dirname(File.realpathSync(__filename)), "../");
const installed = JSON.parse(File.readFileSync(join(applicaiton, "package.json")));

let executing = null;
let throbber = null;

if (!File.existsSync(root)){
    File.mkdirSync(root);
}

if (File.existsSync(join(root, "package.json"))) {
    try {
        executing = JSON.parse(File.readFileSync(join(root, "package.json")));
    } catch {
        executing = null;
    }
}

const preparePackage = function() {
    throbber = Ora("Plugins").start();
    throbber.color = "yellow";

    if (executing && executing.dependencies) {
        const dependencies = Object.keys(executing.dependencies);

        for (let i = 0; i < dependencies.length; i++) {
            const name = dependencies[i];
            const dependency = executing.dependencies[dependencies[i]];

            if ((name.startsWith("homebridge-") || (name.startsWith("@hoobs/") && name !== "@hoobs/homebridge")) && !installed.dependencies.hasOwnProperty(name)) {
                throbber.text = `Plugins: ${name}`;
                throbber.color = "yellow";

                installed.dependencies[name] = dependency;
            }
        }
    }

    if (installed.devDependencies) {
        delete installed.devDependencies;
    }

    if (installed.scripts) {
        delete installed.scripts;
    }

    if (installed.bin) {
        delete installed.bin;
    }

    if (File.existsSync(join(root, "package.json"))) {
        File.unlinkSync(join(root, "package.json"));
    }

    File.appendFileSync(join(root, "package.json"), JSON.stringify(installed, null, 4));

    throbber.text = "Plugins";
    throbber.stop();
}

const setupUserMode = function() {
    return new Promise((resolve) => {
        throbber = Ora("Dependencies").start();
        throbber.color = "yellow";

        if (File.existsSync(join(root, "dist"))) {
            Remove.sync(join(root, "dist"));
        }

        if (File.existsSync(join(root, "lib"))) {
            Remove.sync(join(root, "lib"));
        }

        Copy(join(applicaiton, "node_modules"), join(root, "node_modules"), {
            overwrite: true,
            dot: true,
            junk: false
        }).on(Copy.events.COPY_FILE_START, (data) => {
            throbber.text = `Dependencies: ${basename(data.src)}`;
            throbber.color = "yellow";
        }).finally(() => {
            if (File.existsSync(join(root, "package-lock.json"))) {
                File.unlinkSync(join(root, "package-lock.json"));
            }
        
            if (File.existsSync(join(root, "default.json"))) {
                File.unlinkSync(join(root, "default.json"));
            }

            throbber.text = "Dependencies: default.json";
            throbber.color = "yellow";

            File.copySync(join(applicaiton, "default.json"), join(root, "default.json"));
        
            throbber.text = "Dependencies";
            throbber.stop();

            resolve();
        });
    });
}

if (!executing || installed.version !== executing.version || !File.existsSync(join(root, "lib")) || !File.existsSync(join(root, "dist"))) {
    preparePackage();

    setupUserMode().then(() => {
        throbber = Ora("Application").start();
        throbber.color = "yellow";

        Copy(join(applicaiton, "dist"), join(root, "dist"), {
            overwrite: true,
            dot: true,
            junk: false
        }).on(Copy.events.COPY_FILE_START, (data) => {
            throbber.text = `Application: ${basename(data.src)}`;
            throbber.color = "yellow";
        }).finally(() => {
            Copy(join(applicaiton, "lib"), join(root, "lib"), {
                overwrite: true,
                dot: true,
                junk: false
            }).on(Copy.events.COPY_FILE_START, (data) => {
                throbber.text = `Application: ${basename(data.src)}`;
                throbber.color = "yellow";
            }).finally(() => {
                throbber.text = "Application";
                throbber.stop();

                require(join(root, "lib/cli"))();
            });
        });
    });
} else {
    require(join(root, "lib/cli"))();
}
