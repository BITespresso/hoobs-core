#!/usr/bin/env node

process.title = "hoobs-core";

const OS = require("os");
const File = require("fs-extra");
const Remove = require("rimraf");
const Ora = require("ora");

const { dirname, join } = require("path");
const { exec } = require("child_process");

const root = join(OS.userInfo().homedir, ".hoobs");
const applicaiton = join(dirname(File.realpathSync(__filename)), "../");
const installed = JSON.parse(File.readFileSync(join(applicaiton, "package.json")));

let executing = null;
let throbber = null;

if (File.existsSync(join(root, "package.json"))) {
    executing = JSON.parse(File.readFileSync(join(join(root, "package.json"))));
}

if (!executing || installed.version !== executing.version) {
    throbber = Ora("Initilizing").start();

    if (executing && executing.dependencies) {
        const dependencies = Object.keys(executing.dependencies);

        for (let i = 0; i < dependencies.length; i++) {
            const name = dependencies[i];
            const dependency = executing.dependencies[dependencies[i]];

            if ((name.startsWith("homebridge-") || (name.startsWith("@hoobs/") && name !== "@hoobs/homebridge")) && !installed.dependencies.hasOwnProperty(name)) {
                installed.dependencies[name] = dependency;
            }
        }

        if (File.existsSync(join(root, "package.json"))) {
            File.unlinkSync(join(root, "package.json"));
        }

        File.appendFileSync(join(root, "package.json"), JSON.stringify(installed, null, 4));
    } else {
        if (File.existsSync(join(root, "package.json"))) {
            File.unlinkSync(join(root, "package.json"));
        }

        File.copySync(join(applicaiton, "package.json"), join(root, "package.json"));
    }

    if (File.existsSync(join(root, "dist"))) {
        Remove.sync(join(root, "dist"));
    }

    if (File.existsSync(join(root, "lib"))) {
        Remove.sync(join(root, "lib"));
    }

    if (File.existsSync(join(root, "src"))) {
        Remove.sync(join(root, "src"));
    }

    if (File.existsSync(join(root, "public"))) {
        Remove.sync(join(root, "public"));
    }

    if (File.existsSync(join(root, "node_modules"))) {
        Remove.sync(join(root, "node_modules"));
    }

    File.copySync(join(applicaiton, "lib"), join(root, "lib"));
    File.copySync(join(applicaiton, "src"), join(root, "src"));
    File.copySync(join(applicaiton, "public"), join(root, "public"));

    if (File.existsSync(join(root, "default.json"))) {
        File.unlinkSync(join(root, "default.json"));
    }

    if (File.existsSync(join(root, "vue.config.json"))) {
        File.unlinkSync(join(root, "vue.config.json"));
    }

    if (File.existsSync(join(root, "babel.config.json"))) {
        File.unlinkSync(join(root, "babel.config.json"));
    }

    if (File.existsSync(join(root, "postcss.config.json"))) {
        File.unlinkSync(join(root, "postcss.config.json"));
    }

    File.copySync(join(applicaiton, "default.json"), join(root, "default.json"));
    File.copySync(join(applicaiton, "vue.config.js"), join(root, "vue.config.js"));
    File.copySync(join(applicaiton, "babel.config.js"), join(root, "babel.config.js"));
    File.copySync(join(applicaiton, "postcss.config.js"), join(root, "postcss.config.js"));

    exec("npm install", {
        cwd: root
    }, () => {
        throbber.stop();

        require(join(root, "lib/cli"))();
    });
} else {
    require(join(root, "lib/cli"))();
}
