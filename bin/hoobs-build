#!/bin/bash

MODE=""
DEBUG="false"
BUILD="true"
MODULES="true"
NO_CACHE="false"
INTERFACE_ONLY="false"
DOCKER="false"
UTILITY="false"
TAG="dev"
ARCH="linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6"

usage()
{
    echo ""
    echo "help: hoobs-build [command] [-d | --debug] [--no-build] [--ignore-modules] [--interface-only] [-t | --tag name]"
    echo "    Display information about builtin commands."
    echo ""
    echo "    This is used to build the different parts of HOOBS including the core,"
    echo "    Docker image and the upgrade utility."
    echo ""
    echo "    Commands:"
    echo "        start                            starts the core locally"
    echo "        build                            builds the core npm package"
    echo "        publish                          publishes the core to npm"
    echo "        docker build                     builds the docker image"
    echo "        docker start                     starts the docker container"
    echo "        docker stop                      stops the docker container"
    echo "        docker create                    creates the docker container"
    echo "        docker remove                    removes the docker container"
    echo "        docker publish                   publishes the docker image to docker hub"
    echo "        utility build                    builds the upgrade utility"
    echo "        utility publish                  publishes the upgrade utility to npm"
    echo ""
    echo "    Options:"
    echo "        -d, --debug                      start in debug mode"
    echo "        -t, --tag [name]                 set tag name for docker"
    echo "        -n, --node [version]             the desired Node version"
    echo "        --no-build                       start without building"
    echo "        --ignore-modules                 start without copying node_modules"
    echo "        --interface-only                 build only the Vue interface"
    echo "        --no-cache                       build docker image without the cache"
    echo "        -p, --platform [architecture]    build docker image without the cache"
    echo "        -h, --help                       displays this help menu"
    echo ""
    echo "    Returns:"
    echo "        Returns success unless the install fails."
    echo ""
}

utility()
{
    echo "You need to clone the \"hoobs-upgrade\" repository at the same level as \"hoobs-core\"."
    echo "Run these commands."
    echo "    cd ../"
    echo "    git clone https://github.com/hoobs-org/hoobs-upgrade.git"
}

while [ "$1" != "" ]; do
    case $1 in
        build )                     MODE="build"
                                    ;;

        publish )                   MODE="publish"
                                    ;;

        start )                     MODE="start"
                                    ;;

        stop )                      MODE="stop"
                                    ;;

        create )                    MODE="create"
                                    ;;

        remove )                    MODE="remove"
                                    ;;

        docker )                    DOCKER="true"
                                    ;;

        utility )                   UTILITY="true"
                                    ;;

        -t | --tag)                 shift
                                    TAG=$1
                                    ;;

        -p | --platform)            shift
                                    ARCH=$1
                                    ;;

        -d | --debug )              DEBUG="true"
                                    ;;

        -n | --no-build )           BUILD="false"
                                    ;;

        -c | --no-cache )           NO_CACHE="true"
                                    ;;

        -i | --interface-only )     INTERFACE_ONLY="true"
                                    ;;

        -m | --ignore-modules )     MODULES="false"
                                    ;;

        -h | --help )               usage
                                    exit
                                    ;;

        * )                         usage
                                    exit
    esac

    shift
done

cd "$(dirname "$0")"
cd ../

case $MODE in
    "build")    if [[ "$DOCKER" = "true" && "$UTILITY" = "false" ]]; then
                    if [[ "$BUILD" = "true" ]]; then
                        npm pack
                        rm -f ./builds/hoobs-core.tgz
                        mv ./hoobs-hoobs-*.tgz ./builds/hoobs-core.tgz
                        chmod 755 ./builds/hoobs-core.tgz
                    fi

                    START_ARGUMENTS="--platform $ARCH -t hoobs/hoobs:$TAG"

                    if [[ "$NO_CACHE" = "false" ]]; then
                        START_ARGUMENTS="$START_ARGUMENTS --no-cache"
                    fi

                    docker buildx build $START_ARGUMENTS .
                elif [[ "$DOCKER" = "false" && "$UTILITY" = "true" ]]; then
                    if [[ -f "../hoobs-upgrade/package.json" ]]; then
                        cd ../hoobs-upgrade/

                        npm pack
                        rm -f ./builds/homebridge-to-hoobs.tgz
                        mv ./homebridge-to-hoobs-*.tgz ./builds/homebridge-to-hoobs.tgz
                        chmod 755 ./builds/homebridge-to-hoobs.tgz
                    else
                        utility
                    fi
                elif [[ "$DOCKER" = "false" && "$UTILITY" = "false" ]]; then
                    if [[ "$INTERFACE_ONLY" = "true" ]]; then
                        vue-cli-service build --modern
                    else
                        npm pack
                        rm -f ./builds/hoobs-core.tgz
                        mv ./hoobs-hoobs-*.tgz ./builds/hoobs-core.tgz
                        chmod 755 ./builds/hoobs-core.tgz
                    fi
                else
                    usage
                fi

                ;;

    "publish")  if [[ "$DOCKER" = "true" && "$UTILITY" = "false" ]]; then
                    docker login

                    if [[ "$BUILD" = "true" ]]; then
                        npm pack
                        rm -f ./builds/hoobs-core.tgz
                        mv ./hoobs-hoobs-*.tgz ./builds/hoobs-core.tgz
                        chmod 755 ./builds/hoobs-core.tgz
                    fi

                    CONFIRM=""

                    echo "This will publish to Docker Hub with this tag \"$TAG\"."
                    read -p "Type \"yes\" to continue: " CONFIRM

                    if [[ "$CONFIRM" = "yes" ]]; then
                        docker buildx build --no-cache --platform $ARCH -t hoobs/hoobs:$TAG --push .
                    fi
                elif [[ "$DOCKER" = "false" && "$UTILITY" = "true" ]]; then
                    if [[ -f "../hoobs-upgrade/package.json" ]]; then
                        cd ../hoobs-upgrade/

                        CONFIRM=""

                        echo "This will publish to NPM."
                        read -p "Type \"yes\" to continue: " CONFIRM

                        if [[ "$CONFIRM" = "yes" ]]; then
                            npm publish
                        fi
                    else
                        utility
                    fi
                elif [[ "$DOCKER" = "false" && "$UTILITY" = "false" ]]; then
                    CONFIRM=""

                    echo "This will publish to NPM."
                    read -p "Type \"yes\" to continue: " CONFIRM

                    if [[ "$CONFIRM" = "yes" ]]; then
                        npm publish --access public
                    fi
                else
                fi

                ;;

    "create")   if [[ "$DOCKER" = "true" ]]; then
                    docker container run --publish 8080:8080 --detach --name hoobs hoobs/hoobs:$TAG
                else
                    usage
                fi

                ;;

    "remove")   if [[ "$DOCKER" = "true" ]]; then
                    docker container rm --force hoobs
                else
                    usage
                fi

                ;;

    "start")    if [[ "$DOCKER" = "true" ]]; then
                    docker container start hoobs
                else
                    if [[ "$BUILD" = "true" ]]; then
                        npm pack
                        rm -f ./builds/hoobs-core.tgz
                        mv ./hoobs-hoobs-*.tgz ./builds/hoobs-core.tgz
                        chmod 755 ./builds/hoobs-core.tgz
                    fi

                    START_ARGUMENTS=""

                    if [[ "$MODULES" = "false" ]]; then
                        if [[ "$START_ARGUMENTS" != "" ]]; then
                            START_ARGUMENTS="$START_ARGUMENTS "
                        fi

                        START_ARGUMENTS="$START_ARGUMENTS--ignore-modules"
                    fi

                    if [[ "$DEBUG" = "true" ]]; then
                        if [[ "$START_ARGUMENTS" != "" ]]; then
                            START_ARGUMENTS="$START_ARGUMENTS "
                        fi

                        START_ARGUMENTS="$START_ARGUMENTS--debug"
                    fi

                    ./bin/hoobs $START_ARGUMENTS
                fi

                ;;

    "stop")     if [[ "$DOCKER" = "true" ]]; then
                    docker container stop hoobs
                else
                    usage
                fi

                ;;

    * )         usage
                ;;
esac
